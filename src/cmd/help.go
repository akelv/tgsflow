package cmd

import (
	"fmt"
	"os"
)

// CmdHelp prints a concise usage with available commands.
func CmdHelp(_ []string) int {
    fmt.Fprintln(os.Stderr, "Usage: tgs [--json] <command> [args]")
    fmt.Fprintln(os.Stderr, "")
    fmt.Fprintln(os.Stderr, "Global Flags:")
    fmt.Fprintln(os.Stderr, "  --json            Emit JSONL logs to stderr")
    fmt.Fprintln(os.Stderr, "  --version         Print version and exit")
    fmt.Fprintln(os.Stderr, "")
    fmt.Fprintln(os.Stderr, "Commands:")
    fmt.Fprintln(os.Stderr, "  help              Show this help")
    fmt.Fprintln(os.Stderr, "  init              Initialize TGS layout (idempotent)")
    fmt.Fprintln(os.Stderr, "  context           Context tools (e.g., pack)")
    fmt.Fprintln(os.Stderr, "  verify            Run hooks/policy checks (e.g., ears)")
    fmt.Fprintln(os.Stderr, "  agent             AI adapter runner (shell adapter)")
    fmt.Fprintln(os.Stderr, "  version           Print version")
    fmt.Fprintln(os.Stderr, "")
    fmt.Fprintln(os.Stderr, "Settings & Configuration:")
    fmt.Fprintln(os.Stderr, "  Config file       tgs/tgs.yml (auto-loaded); env prefix TGS_ via Viper")
    fmt.Fprintln(os.Stderr, "  Key settings      ai.provider, ai.model, ai.api_key_env, ai.shell_adapter_path")
    fmt.Fprintln(os.Stderr, "                   guardrails.ears.enable, guardrails.ears.paths")
    fmt.Fprintln(os.Stderr, "  Example (tgs/tgs.yml):")
    fmt.Fprintln(os.Stderr, "    guardrails:")
    fmt.Fprintln(os.Stderr, "      ears:")
    fmt.Fprintln(os.Stderr, "        enable: true")
    fmt.Fprintln(os.Stderr, "        paths: [\"tgs/design/10_needs.md\", \"tgs/design/20_requirements.md\"]")
    fmt.Fprintln(os.Stderr, "    ai:")
    fmt.Fprintln(os.Stderr, "      provider: openai   # or anthropic")
    fmt.Fprintln(os.Stderr, "      model: gpt-4o-mini # adjust per provider")
    fmt.Fprintln(os.Stderr, "      api_key_env: OPENAI_API_KEY")
    fmt.Fprintln(os.Stderr, "      shell_adapter_path: tgs/adapters/claude-code.sh")
    fmt.Fprintln(os.Stderr, "")
    fmt.Fprintln(os.Stderr, "Requirements:")
    fmt.Fprintln(os.Stderr, "  - Binary installed (brew or scripts/install.sh) or build from source")
    fmt.Fprintln(os.Stderr, "  - AI API key exported per ai.api_key_env (e.g., OPENAI_API_KEY or ANTHROPIC_API_KEY)")
    fmt.Fprintln(os.Stderr, "  - For context pack with shell adapter: adapter at ai.shell_adapter_path")
    fmt.Fprintln(os.Stderr, "  - (Dev) Java + ANTLR only if regenerating EARS grammar (make ears-gen)")
    fmt.Fprintln(os.Stderr, "")
    fmt.Fprintln(os.Stderr, "Quickstart:")
    fmt.Fprintln(os.Stderr, "  # 1) Initialize TGS structure (safe, idempotent)")
    fmt.Fprintln(os.Stderr, "  tgs init")
    fmt.Fprintln(os.Stderr, "  # 2) Create a thought")
    fmt.Fprintln(os.Stderr, "  make new-thought title=\"Add feature\" spec=\"One line spec\"")
    fmt.Fprintln(os.Stderr, "  # 3) Pack context into aibrief.md for the active thought")
    fmt.Fprintln(os.Stderr, "  tgs context pack \"<your goal>\"")
    fmt.Fprintln(os.Stderr, "  # 4) Verify design docs with EARS")
    fmt.Fprintln(os.Stderr, "  tgs verify ears --repo . --ci")
    fmt.Fprintln(os.Stderr, "")
    fmt.Fprintln(os.Stderr, "Examples:")
    fmt.Fprintln(os.Stderr, "  tgs context pack \"payment refund flow\" --out tgs/thoughts/<dir>/aibrief.md")
    fmt.Fprintln(os.Stderr, "  tgs verify ears --paths tgs/design/10_needs.md,tgs/design/20_requirements.md")
    fmt.Fprintln(os.Stderr, "")
    return 0
}
